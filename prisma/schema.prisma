// SETTINGS
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

// MODELS
model Customer {
  id         String    @id @default(uuid())
  email      String    @unique
  password   String
  first_name String
  last_name  String
  payment    Payment   @default(CASH)
  phone      String?
  address    Address?  @relation(fields: [addressId], references: [id]) // 1-1
  addressId  String?
  cart       Order?    @relation("CustomerCart", fields: [orderId], references: [id]) // 1-1
  orderId    String?
  orders     Order[] // 1-n
  favorites  Service[] // 1-n
  ratings    Rating[] // 1-n
}

model Service {
  id          String            @id @default(uuid())
  email       String            @unique
  password    String
  name        String
  description String?
  picture     String?
  phone       String?
  web         String?
  category    ServiceCategory[]
  orders      Order[] // 1-n
  ratings     Rating[] // 1-n
  menu        Item[] // 1-n
  address     Address?          @relation(fields: [addressId], references: [id]) // 1-1
  addressId   String?
  customers   Customer[] // n-m
}

model Address {
  id          String    @id @default(uuid())
  customer    Customer? // 1-1
  service     Service? // 1-1
  country     String?
  city        String?
  address     String?
  postal_code String?
}

model Order {
  id          String      @id @default(uuid())
  service     Service?    @relation(fields: [serviceId], references: [id]) // n-1
  serviceId   String?
  items       OrderItem[] // 1-n
  customer    Customer?   @relation(fields: [customerId], references: [id]) // 1-n
  customerId  String?
  owner       Customer?   @relation("CustomerCart") // 1-1
  payment     Payment     @default(CASH)
  status      Status      @default(WAITING)
  completedAt DateTime?
  createdAt   DateTime    @default(now())
}

model OrderItem {
  id      String @id @default(uuid())
  amount  Int    @default(1)
  item    Item   @relation(fields: [itemId], references: [id]) // 1-1
  itemId  String
  order   Order  @relation(fields: [orderId], references: [id]) // 1-1
  orderId String
}

model Item {
  id          String         @id @default(uuid())
  name        String
  description String?
  picture     String?
  price       Float
  weight      Float?
  time        Float?
  categories  ItemCategory[]
  service     Service        @relation(fields: [serviceId], references: [id]) // 1-n
  serviceId   String
  order_items OrderItem[] // 1-n
}

model Rating {
  value      Float
  customer   Customer @relation(fields: [customerId], references: [id]) // 1-n
  customerId String
  service    Service  @relation(fields: [serviceId], references: [id]) // 1-n
  serviceId  String

  @@unique([customerId, serviceId])
}

enum Status {
  WAITING
  READY
  CONFIRMED
  SENT
  COMPLETED
}

enum Payment {
  CASH
  CARD
  ONLINE
}

enum ServiceCategory {
  RESTAURANT
  CANTEEN
  PIZZA
  DELIVERY
  PATISSERIE
  PUB
  FASTFOOD
}

enum ItemCategory {
  DRINK
  SOUP
  PIZZA
  MEAT
  DESSERT
}
